# Cursor AI Rules for EtoAudioBook

## Project Overview
EtoAudioBook: React + Flask text-to-speech audiobook generator with multi-voice character support using Google Cloud TTS.

## Tech Stack
- Frontend: React (JavaScript), Create React App
- Backend: Flask (Python), Google Cloud Text-to-Speech  
- Development: VS Code, pytest, ESLint, Prettier, Black formatter
- Infrastructure: Google Cloud Platform

## Code Style & Standards

### Python (Backend)
- Use Black formatter (88 char line length)
- Use isort for import organization  
- Use type hints for function parameters and returns
- Use snake_case for variables/functions, PascalCase for classes
- Use descriptive variable names (e.g., `tts_client` not `client`)
- Include docstrings for all functions and classes
- Use f-strings for string formatting
- Handle exceptions with specific error types

### JavaScript/React (Frontend)
- Use Prettier formatter with 2-space indentation
- Use camelCase naming convention
- Prefer functional components with hooks over class components
- Use arrow functions for inline functions
- Use async/await instead of .then() chains
- Destructure props and state variables
- Use meaningful component and variable names

### File Structure
```
Backend/
├── app.py              # Main Flask application
├── credentials.py      # Secure credential management
├── requirements.txt    # Python dependencies
└── venv/              # Virtual environment

Frontend/
├── src/
│   ├── components/    # React components  
│   ├── App.js        # Main app component
│   └── index.js      # Entry point
├── public/           # Static assets
└── package.json      # Node dependencies
```

## Security Rules
- NEVER commit credentials, API keys, or secrets
- Always use environment variables for sensitive data
- Validate and sanitize all user inputs
- Use proper CORS configuration
- Log security events appropriately
- Use HTTPS in production

## TTS Implementation Guidelines
- Parse markdown format: `**Character Name:** dialogue`
- Support voice assignment per character role
- Handle text chunking for long content
- Provide generation progress feedback
- Return audio in MP3 format
- Implement proper error handling for TTS API calls

## API Design Patterns
- Use RESTful endpoint naming
- Return consistent JSON response format:
  ```json
  {
    "success": true,
    "data": {...},
    "message": "Success description",
    "error": null
  }
  ```
- Use appropriate HTTP status codes
- Include request validation middleware
- Handle file uploads securely

## Testing Requirements
- Write unit tests for core business logic
- Test TTS integration with mock data first
- Include error case testing
- Test role detection accuracy
- Use pytest fixtures for setup/teardown
- Mock external API calls in tests

## Development Workflow
- Use virtual environment for Python dependencies
- Use `make` commands for common tasks:
  - `make setup` - Initial project setup
  - `make run-all` - Start both servers
  - `make test` - Run all tests
  - `make format` - Format all code
  - `make lint` - Run linters

## Error Handling Patterns
- Use try/except blocks with specific exceptions
- Log errors with appropriate levels
- Return user-friendly error messages
- Don't expose internal system details
- Include error context for debugging

## Performance Considerations
- Use async operations for TTS generation
- Implement progress tracking for long operations
- Cache frequently used data where appropriate
- Optimize file upload handling
- Use appropriate database indexing

## Common Patterns to Use
- Environment variable loading: `load_dotenv()`
- Flask error handlers: `@app.errorhandler(404)`
- React error boundaries for component error handling
- Async state updates in React: `useState` + `useEffect`
- File validation before processing
- Progress indicators for long-running tasks

## Avoid These Anti-Patterns
- Hardcoded configuration values
- Missing error handling
- Blocking operations on main thread
- Unvalidated user inputs  
- Missing logging for important operations
- Inconsistent naming conventions
- Large functions without proper decomposition

## Documentation Standards
- Include README for setup instructions
- Document API endpoints with examples
- Add inline comments for complex logic
- Update AGENTS.md for development guidelines
- Include troubleshooting common issues
